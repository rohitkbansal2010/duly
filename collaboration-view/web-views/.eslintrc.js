module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 2020,
    sourceType: 'module',
  },
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react/recommended',
    'plugin:react-hooks/recommended',
    'plugin:import/errors',
    'plugin:import/warnings',
    'plugin:import/typescript',
    'plugin:jsx-a11y/recommended',
  ],
  plugins: [ 'simple-import-sort', 'react' ],
  rules: {
    'no-multi-spaces': 'error',
    'padded-blocks': [ 'error', 'never' ],
    'space-infix-ops': 'error',
    'space-in-parens': [ 'error', 'never' ],
    'comma-spacing': [ 'error', { 'before': false, 'after': true } ],
    '@typescript-eslint/no-non-null-assertion': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-unused-vars': [ 'error' ],
    '@typescript-eslint/no-var-requires': 'off',
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: 'typeLike',
        format: [ 'PascalCase' ],
      },
    ],
    'array-bracket-spacing': [ 'error', 'always' ],
    'arrow-body-style': [ 'error', 'as-needed' ],
    'arrow-parens': [ 'error', 'as-needed', { requireForBlockBody: true } ],
    'comma-dangle': [
      'error',
      {
        arrays: 'always-multiline',
        objects: 'always-multiline',
        imports: 'never',
        exports: 'never',
        functions: 'never',
      },
    ],
    'eol-last': [ 'error', 'always' ],
    'function-call-argument-newline': [ 'error', 'consistent' ],
    'function-paren-newline': [ 'error', 'multiline-arguments' ],
    'implicit-arrow-linebreak': [ 'error', 'below' ],
    'import/first': 'error',
    'import/newline-after-import': 'error',
    'import/order': [
      'error',
      {
        groups: [ 'external', 'builtin', 'internal', 'parent', 'sibling', 'index', 'object' ],
        pathGroups: [ {
          pattern: 'react(*)',
          group: 'external',
          position: 'before',
        } ],
        pathGroupsExcludedImportTypes: [ 'react' ],
        'newlines-between': 'always',
        alphabetize: {
          order: 'asc',
          caseInsensitive: true,
        },
      },
    ],
    indent: [ 'error', 2, {
      ignoredNodes: [ 'JSXElement *', 'JSXElement' ],
      SwitchCase: 1,
    } ],
    'linebreak-style': [ 'error', 'unix' ],
    'max-len': [
      'error',
      {
        code: 100,
        tabWidth: 2,
        ignoreComments: false,
        ignoreUrls: true,
        ignoreStrings: true,
        ignoreTemplateLiterals: true,
        ignoreRegExpLiterals: true,
      },
    ],
    'newline-per-chained-call': 'error',
    'no-unused-vars': 'off',
    'no-use-before-define': 'error',
    'no-useless-return': 'error',
    'object-curly-spacing': [ 'error', 'always' ],
    'object-curly-newline': [
      'error',
      {
        ObjectExpression: {
          multiline: true,
          minProperties: 4,
        },
        ObjectPattern: {
          multiline: true,
          minProperties: 4,
        },
        ImportDeclaration: {
          multiline: true,
          minProperties: 4,
        },
        ExportDeclaration: {
          multiline: true,
          minProperties: 4,
        },
      },
    ],
    quotes: [ 'error', 'single', { allowTemplateLiterals: true } ],
    'no-bitwise': 'error',
    'react-hooks/rules-of-hooks': 'error',
    'react/jsx-first-prop-new-line': [ 'error', 'multiline-multiprop' ],
    'react/jsx-indent': [ 'warn', 2, { checkAttributes: true } ],
    'react/jsx-max-props-per-line': [ 1, { when: 'multiline' } ],
    'react/jsx-closing-bracket-location': [ 1, 'tag-aligned' ],
    'react/jsx-indent-props': [ 'error', 2 ],
    'react/jsx-one-expression-per-line': 'off',
    'react/jsx-uses-react': 'off',
    'react/jsx-wrap-multilines': [
      'error',
      {
        declaration: 'parens-new-line',
        prop: 'parens-new-line',
        assignment: 'parens-new-line',
        return: 'parens-new-line',
        arrow: 'parens-new-line',
        condition: 'parens-new-line',
        logical: 'parens-new-line',
      },
    ],
    'react/prop-types': 'off',
    'react/prefer-stateless-function': 'off',
    'react/react-in-js-scope': 'off',
    'react/react-in-jsx-scope': 'off',
    'react/self-closing-comp': 'error',
    semi: [ 'error', 'always' ],
    'sort-imports': 'off',
    'jsx-quotes': [ 'error', 'prefer-double' ],
  },
  settings: {
    'import/resolver': {
      typescript: {},
      node: { extensions: [ '.tsx', '.ts', '.js' ] },
    },
    react: { version: 'detect' },
  },
};
